"""
verify_pdf.py ‚Äì Ki·ªÉm tra ch·ªØ k√Ω PDF (ho·∫°t ƒë·ªông m·ªçi m√¥i tr∆∞·ªùng)
--------------------------------------------------------------
D·ª±a tr√™n asn1crypto ƒë·ªÉ ƒë·ªçc c·∫•u tr√∫c PKCS#7 (CMS) t·ª´ v√πng /Contents.
Kh√¥ng c·∫ßn cryptography.pkcs7.
"""

import re, sys
from cryptography import x509
from asn1crypto import cms

def extract_signature(pdf_bytes):
    # T√¨m /ByteRange [a b c d]
    m = re.search(rb"/ByteRange\s*\[\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s*\]", pdf_bytes)
    if not m:
        raise RuntimeError("Kh√¥ng t√¨m th·∫•y /ByteRange trong PDF.")
    a, b, c, d = map(int, m.groups())

    contents = pdf_bytes[b:c].strip(b"\x00")
    to_be_signed = pdf_bytes[:b] + pdf_bytes[c:]
    return to_be_signed, contents

def verify_signature(pdf_path, cert_path):
    pdf_bytes = open(pdf_path, "rb").read()
    to_be_signed, der_sig = extract_signature(pdf_bytes)
    cert = x509.load_pem_x509_certificate(open(cert_path, "rb").read())

    # D√πng asn1crypto parse PKCS#7
    try:
        pkcs7 = cms.ContentInfo.load(der_sig)
    except Exception as e:
        print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c PKCS#7:", e)
        return

    if pkcs7['content_type'].native != 'signed_data':
        print("‚ùå Kh√¥ng ph·∫£i ki·ªÉu SignedData.")
        return

    signed_data = pkcs7['content']
    signer_infos = signed_data['signer_infos']
    certs = signed_data['certificates']

    print("üìò Thu·∫≠t to√°n k√Ω:", cert.signature_algorithm_oid._name)
    print("üìÑ K√≠ch th∆∞·ªõc ch·ªØ k√Ω:", len(der_sig), "bytes")
    print(f"üîç PKCS#7 c√≥ {len(certs)} ch·ª©ng ch·ªâ v√† {len(signer_infos)} signer(s).")

    if len(certs) > 0 and len(signer_infos) > 0:
        print("‚úÖ C·∫•u tr√∫c ch·ªØ k√Ω h·ª£p l·ªá (c√≥ signer & cert).")
    else:
        print("‚ùå Thi·∫øu th√¥ng tin signer ho·∫∑c cert trong ch·ªØ k√Ω.")

    # G·ª£i √Ω x√°c th·ª±c hash th·∫≠t b·∫±ng OpenSSL
    print("\nüëâ ƒê·ªÉ ki·ªÉm ch·ª©ng th·∫≠t:")
    print("openssl cms -verify -inform DER -in signature.der -content data.bin -noverify -certfile demo_cert.pem")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("C√°ch d√πng: python verify_pdf.py signed.pdf demo_cert.pem")
        sys.exit(1)
    verify_signature(sys.argv[1], sys.argv[2])
